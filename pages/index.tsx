import type { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import React, { useState } from 'react';
import Modal from '../components/Modal';
import InputBar from '../components/InputBar';
import TodoList from '../components/TodoList';
import homeStyles from '../styles/Home.module.css';
import DeleteModal from '../components/DeleteModal';
import useSWR from 'swr';
import Alert from '../components/Alert';
import Button from '../components/Button';


// const fetcher = (input: RequestInfo | URL, init?: RequestInit | undefined) => fetch(input, init).then((res) => res.json());
const fetcher = async (input: RequestInfo | URL, init?: RequestInit | undefined) => {
    const data = await fetch(input, init);
    return data.json();
}

const Home: NextPage = () => {
    const { data, error } = useSWR('/api/items', fetcher);

    if (error) return <div>Failed to load items.</div>
    if (!data) return <div>Loading...</div>


    const listRef = React.createRef<TodoList>();
    const modalRef = React.createRef<Modal>();
    const deleteModalRef = React.createRef<DeleteModal>();

    return (
        <div className="min-w-full w-full min-h-screen bg-gray-100">
            <Head>
                <title>Todo List</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            
            <Button onClick={ signUp } className="bg-slate-600 text-white absolute top-2 right-2">Sign Up</Button>
            <DeleteModal modalRef={ modalRef } ref={ deleteModalRef } />
            
            <div className="flex justify-center">
                <InputBar className="w-3/4 py-20" listRef={listRef} />
            </div>
            
            <TodoList ref={ listRef } modalRef={ modalRef } deleteModalRef={ deleteModalRef } apiData={ data } />
        </div>
    );
}

async function signUp() {
    const res = await fetch("/api/cookies", { method: "GET" });
    console.log(res);
}



export default Home;